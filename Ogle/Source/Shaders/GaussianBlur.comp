#version 460 core

layout (binding = 0, rgba8) uniform image2D u_Framebuffer;
layout (local_size_x = 8, local_size_y = 8) in;

uniform sampler2D u_ImageSampler;
uniform sampler2D u_FilterSampler;

void main()
{
	uvec2 pixel = gl_GlobalInvocationID.xy;

	// Todo: I need image texture dims here
	int image_width = 512;
	int image_height = 512;

	vec3 result = vec3(0.f);

	// Todo: I need filter dims here
	int filter_width = 9;
	for (int y = -filter_width/2; y <= filter_width/2; ++y)
	{
		for (int x = -filter_width/2; x <= filter_width/2; ++x)
		{
			int image_x = min(max(ivec2(pixel).x + x, 0), image_width - 1);
			int image_y = min(max(ivec2(pixel).y + y, 0), image_height - 1);
	
			vec2 image_tex_coords = vec2(image_x, image_y) / vec2(image_width, image_height);
			vec4 color = texture(u_ImageSampler, image_tex_coords);
	
			vec2 filter_tex_coords = vec2( (x + (filter_width / 2.f)) / float(filter_width), (y + filter_width / 2.f) / float(filter_width) );
			float filter_value = texture(u_FilterSampler, filter_tex_coords).r;

			result += vec3(color * vec4(filter_value));
		}
	}

	imageStore(u_Framebuffer, ivec2(pixel), vec4(result, 1.f));
}